# coding: utf-8

"""
    ParallelCluster

    ParallelCluster API  # noqa: E501

    The version of the OpenAPI document: 3.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class EC2Instance(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "launchTime",
            "instanceId",
            "instanceType",
            "state",
            "privateIpAddress",
        }
        
        class properties:
            instanceId = schemas.StrSchema
            instanceType = schemas.StrSchema
            launchTime = schemas.DateTimeSchema
            privateIpAddress = schemas.StrSchema
        
            @staticmethod
            def state() -> typing.Type['InstanceState']:
                return InstanceState
            publicIpAddress = schemas.StrSchema
            __annotations__ = {
                "instanceId": instanceId,
                "instanceType": instanceType,
                "launchTime": launchTime,
                "privateIpAddress": privateIpAddress,
                "state": state,
                "publicIpAddress": publicIpAddress,
            }
    
    launchTime: MetaOapg.properties.launchTime
    instanceId: MetaOapg.properties.instanceId
    instanceType: MetaOapg.properties.instanceType
    state: 'InstanceState'
    privateIpAddress: MetaOapg.properties.privateIpAddress
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceId"]) -> MetaOapg.properties.instanceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceType"]) -> MetaOapg.properties.instanceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["launchTime"]) -> MetaOapg.properties.launchTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateIpAddress"]) -> MetaOapg.properties.privateIpAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'InstanceState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicIpAddress"]) -> MetaOapg.properties.publicIpAddress: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["instanceId", "instanceType", "launchTime", "privateIpAddress", "state", "publicIpAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceId"]) -> MetaOapg.properties.instanceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceType"]) -> MetaOapg.properties.instanceType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["launchTime"]) -> MetaOapg.properties.launchTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateIpAddress"]) -> MetaOapg.properties.privateIpAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> 'InstanceState': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicIpAddress"]) -> typing.Union[MetaOapg.properties.publicIpAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["instanceId", "instanceType", "launchTime", "privateIpAddress", "state", "publicIpAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        launchTime: typing.Union[MetaOapg.properties.launchTime, str, datetime, ],
        instanceId: typing.Union[MetaOapg.properties.instanceId, str, ],
        instanceType: typing.Union[MetaOapg.properties.instanceType, str, ],
        state: 'InstanceState',
        privateIpAddress: typing.Union[MetaOapg.properties.privateIpAddress, str, ],
        publicIpAddress: typing.Union[MetaOapg.properties.publicIpAddress, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EC2Instance':
        return super().__new__(
            cls,
            *_args,
            launchTime=launchTime,
            instanceId=instanceId,
            instanceType=instanceType,
            state=state,
            privateIpAddress=privateIpAddress,
            publicIpAddress=publicIpAddress,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.instance_state import InstanceState
