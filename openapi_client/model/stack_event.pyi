# coding: utf-8

"""
    ParallelCluster

    ParallelCluster API  # noqa: E501

    The version of the OpenAPI document: 3.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class StackEvent(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "eventId",
            "physicalResourceId",
            "resourceStatus",
            "stackId",
            "stackName",
            "logicalResourceId",
            "resourceType",
            "timestamp",
        }
        
        class properties:
            stackId = schemas.StrSchema
            eventId = schemas.StrSchema
            stackName = schemas.StrSchema
            logicalResourceId = schemas.StrSchema
            physicalResourceId = schemas.StrSchema
            resourceType = schemas.StrSchema
            timestamp = schemas.DateTimeSchema
        
            @staticmethod
            def resourceStatus() -> typing.Type['CloudFormationResourceStatus']:
                return CloudFormationResourceStatus
            resourceStatusReason = schemas.StrSchema
            resourceProperties = schemas.StrSchema
            clientRequestToken = schemas.StrSchema
            __annotations__ = {
                "stackId": stackId,
                "eventId": eventId,
                "stackName": stackName,
                "logicalResourceId": logicalResourceId,
                "physicalResourceId": physicalResourceId,
                "resourceType": resourceType,
                "timestamp": timestamp,
                "resourceStatus": resourceStatus,
                "resourceStatusReason": resourceStatusReason,
                "resourceProperties": resourceProperties,
                "clientRequestToken": clientRequestToken,
            }
    
    eventId: MetaOapg.properties.eventId
    physicalResourceId: MetaOapg.properties.physicalResourceId
    resourceStatus: 'CloudFormationResourceStatus'
    stackId: MetaOapg.properties.stackId
    stackName: MetaOapg.properties.stackName
    logicalResourceId: MetaOapg.properties.logicalResourceId
    resourceType: MetaOapg.properties.resourceType
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stackId"]) -> MetaOapg.properties.stackId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventId"]) -> MetaOapg.properties.eventId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stackName"]) -> MetaOapg.properties.stackName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logicalResourceId"]) -> MetaOapg.properties.logicalResourceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["physicalResourceId"]) -> MetaOapg.properties.physicalResourceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceType"]) -> MetaOapg.properties.resourceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceStatus"]) -> 'CloudFormationResourceStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceStatusReason"]) -> MetaOapg.properties.resourceStatusReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceProperties"]) -> MetaOapg.properties.resourceProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientRequestToken"]) -> MetaOapg.properties.clientRequestToken: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stackId", "eventId", "stackName", "logicalResourceId", "physicalResourceId", "resourceType", "timestamp", "resourceStatus", "resourceStatusReason", "resourceProperties", "clientRequestToken", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stackId"]) -> MetaOapg.properties.stackId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventId"]) -> MetaOapg.properties.eventId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stackName"]) -> MetaOapg.properties.stackName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logicalResourceId"]) -> MetaOapg.properties.logicalResourceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["physicalResourceId"]) -> MetaOapg.properties.physicalResourceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceType"]) -> MetaOapg.properties.resourceType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceStatus"]) -> 'CloudFormationResourceStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceStatusReason"]) -> typing.Union[MetaOapg.properties.resourceStatusReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceProperties"]) -> typing.Union[MetaOapg.properties.resourceProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientRequestToken"]) -> typing.Union[MetaOapg.properties.clientRequestToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stackId", "eventId", "stackName", "logicalResourceId", "physicalResourceId", "resourceType", "timestamp", "resourceStatus", "resourceStatusReason", "resourceProperties", "clientRequestToken", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        eventId: typing.Union[MetaOapg.properties.eventId, str, ],
        physicalResourceId: typing.Union[MetaOapg.properties.physicalResourceId, str, ],
        resourceStatus: 'CloudFormationResourceStatus',
        stackId: typing.Union[MetaOapg.properties.stackId, str, ],
        stackName: typing.Union[MetaOapg.properties.stackName, str, ],
        logicalResourceId: typing.Union[MetaOapg.properties.logicalResourceId, str, ],
        resourceType: typing.Union[MetaOapg.properties.resourceType, str, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        resourceStatusReason: typing.Union[MetaOapg.properties.resourceStatusReason, str, schemas.Unset] = schemas.unset,
        resourceProperties: typing.Union[MetaOapg.properties.resourceProperties, str, schemas.Unset] = schemas.unset,
        clientRequestToken: typing.Union[MetaOapg.properties.clientRequestToken, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StackEvent':
        return super().__new__(
            cls,
            *_args,
            eventId=eventId,
            physicalResourceId=physicalResourceId,
            resourceStatus=resourceStatus,
            stackId=stackId,
            stackName=stackName,
            logicalResourceId=logicalResourceId,
            resourceType=resourceType,
            timestamp=timestamp,
            resourceStatusReason=resourceStatusReason,
            resourceProperties=resourceProperties,
            clientRequestToken=clientRequestToken,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.cloud_formation_resource_status import CloudFormationResourceStatus
