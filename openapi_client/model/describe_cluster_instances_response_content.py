# coding: utf-8

"""
    ParallelCluster

    ParallelCluster API  # noqa: E501

    The version of the OpenAPI document: 3.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DescribeClusterInstancesResponseContent(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "instances",
        }
        
        class properties:
            
            
            class instances(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClusterInstance']:
                        return ClusterInstance
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ClusterInstance'], typing.List['ClusterInstance']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'instances':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClusterInstance':
                    return super().__getitem__(i)
            nextToken = schemas.StrSchema
            __annotations__ = {
                "instances": instances,
                "nextToken": nextToken,
            }
    
    instances: MetaOapg.properties.instances
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instances"]) -> MetaOapg.properties.instances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextToken"]) -> MetaOapg.properties.nextToken: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["instances", "nextToken", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instances"]) -> MetaOapg.properties.instances: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextToken"]) -> typing.Union[MetaOapg.properties.nextToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["instances", "nextToken", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        instances: typing.Union[MetaOapg.properties.instances, list, tuple, ],
        nextToken: typing.Union[MetaOapg.properties.nextToken, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DescribeClusterInstancesResponseContent':
        return super().__new__(
            cls,
            *_args,
            instances=instances,
            nextToken=nextToken,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.cluster_instance import ClusterInstance
