# coding: utf-8

"""
    ParallelCluster

    ParallelCluster API  # noqa: E501

    The version of the OpenAPI document: 3.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ImageInfoSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "imageId",
            "imageBuildStatus",
            "region",
            "version",
        }
        
        class properties:
            
            
            class imageId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[a-zA-Z][a-zA-Z0-9-]+$',  # noqa: E501
                    }]
            region = schemas.StrSchema
            version = schemas.StrSchema
        
            @staticmethod
            def imageBuildStatus() -> typing.Type['ImageBuildStatus']:
                return ImageBuildStatus
        
            @staticmethod
            def ec2AmiInfo() -> typing.Type['Ec2AmiInfoSummary']:
                return Ec2AmiInfoSummary
            cloudformationStackArn = schemas.StrSchema
        
            @staticmethod
            def cloudformationStackStatus() -> typing.Type['CloudFormationStackStatus']:
                return CloudFormationStackStatus
            __annotations__ = {
                "imageId": imageId,
                "region": region,
                "version": version,
                "imageBuildStatus": imageBuildStatus,
                "ec2AmiInfo": ec2AmiInfo,
                "cloudformationStackArn": cloudformationStackArn,
                "cloudformationStackStatus": cloudformationStackStatus,
            }
    
    imageId: MetaOapg.properties.imageId
    imageBuildStatus: 'ImageBuildStatus'
    region: MetaOapg.properties.region
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageId"]) -> MetaOapg.properties.imageId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageBuildStatus"]) -> 'ImageBuildStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ec2AmiInfo"]) -> 'Ec2AmiInfoSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cloudformationStackArn"]) -> MetaOapg.properties.cloudformationStackArn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cloudformationStackStatus"]) -> 'CloudFormationStackStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["imageId", "region", "version", "imageBuildStatus", "ec2AmiInfo", "cloudformationStackArn", "cloudformationStackStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageId"]) -> MetaOapg.properties.imageId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageBuildStatus"]) -> 'ImageBuildStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ec2AmiInfo"]) -> typing.Union['Ec2AmiInfoSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cloudformationStackArn"]) -> typing.Union[MetaOapg.properties.cloudformationStackArn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cloudformationStackStatus"]) -> typing.Union['CloudFormationStackStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["imageId", "region", "version", "imageBuildStatus", "ec2AmiInfo", "cloudformationStackArn", "cloudformationStackStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        imageId: typing.Union[MetaOapg.properties.imageId, str, ],
        imageBuildStatus: 'ImageBuildStatus',
        region: typing.Union[MetaOapg.properties.region, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        ec2AmiInfo: typing.Union['Ec2AmiInfoSummary', schemas.Unset] = schemas.unset,
        cloudformationStackArn: typing.Union[MetaOapg.properties.cloudformationStackArn, str, schemas.Unset] = schemas.unset,
        cloudformationStackStatus: typing.Union['CloudFormationStackStatus', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ImageInfoSummary':
        return super().__new__(
            cls,
            *_args,
            imageId=imageId,
            imageBuildStatus=imageBuildStatus,
            region=region,
            version=version,
            ec2AmiInfo=ec2AmiInfo,
            cloudformationStackArn=cloudformationStackArn,
            cloudformationStackStatus=cloudformationStackStatus,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.cloud_formation_stack_status import CloudFormationStackStatus
from openapi_client.model.ec2_ami_info_summary import Ec2AmiInfoSummary
from openapi_client.model.image_build_status import ImageBuildStatus
