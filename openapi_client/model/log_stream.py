# coding: utf-8

"""
    ParallelCluster

    ParallelCluster API  # noqa: E501

    The version of the OpenAPI document: 3.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class LogStream(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "logStreamArn",
            "creationTime",
            "firstEventTimestamp",
            "logStreamName",
            "lastEventTimestamp",
            "lastIngestionTime",
            "uploadSequenceToken",
        }
        
        class properties:
            logStreamName = schemas.StrSchema
            creationTime = schemas.DateTimeSchema
            firstEventTimestamp = schemas.DateTimeSchema
            lastEventTimestamp = schemas.DateTimeSchema
            lastIngestionTime = schemas.DateTimeSchema
            uploadSequenceToken = schemas.StrSchema
            logStreamArn = schemas.StrSchema
            __annotations__ = {
                "logStreamName": logStreamName,
                "creationTime": creationTime,
                "firstEventTimestamp": firstEventTimestamp,
                "lastEventTimestamp": lastEventTimestamp,
                "lastIngestionTime": lastIngestionTime,
                "uploadSequenceToken": uploadSequenceToken,
                "logStreamArn": logStreamArn,
            }
    
    logStreamArn: MetaOapg.properties.logStreamArn
    creationTime: MetaOapg.properties.creationTime
    firstEventTimestamp: MetaOapg.properties.firstEventTimestamp
    logStreamName: MetaOapg.properties.logStreamName
    lastEventTimestamp: MetaOapg.properties.lastEventTimestamp
    lastIngestionTime: MetaOapg.properties.lastIngestionTime
    uploadSequenceToken: MetaOapg.properties.uploadSequenceToken
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logStreamName"]) -> MetaOapg.properties.logStreamName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTime"]) -> MetaOapg.properties.creationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstEventTimestamp"]) -> MetaOapg.properties.firstEventTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastEventTimestamp"]) -> MetaOapg.properties.lastEventTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastIngestionTime"]) -> MetaOapg.properties.lastIngestionTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uploadSequenceToken"]) -> MetaOapg.properties.uploadSequenceToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logStreamArn"]) -> MetaOapg.properties.logStreamArn: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["logStreamName", "creationTime", "firstEventTimestamp", "lastEventTimestamp", "lastIngestionTime", "uploadSequenceToken", "logStreamArn", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logStreamName"]) -> MetaOapg.properties.logStreamName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTime"]) -> MetaOapg.properties.creationTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstEventTimestamp"]) -> MetaOapg.properties.firstEventTimestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastEventTimestamp"]) -> MetaOapg.properties.lastEventTimestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastIngestionTime"]) -> MetaOapg.properties.lastIngestionTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uploadSequenceToken"]) -> MetaOapg.properties.uploadSequenceToken: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logStreamArn"]) -> MetaOapg.properties.logStreamArn: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["logStreamName", "creationTime", "firstEventTimestamp", "lastEventTimestamp", "lastIngestionTime", "uploadSequenceToken", "logStreamArn", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        logStreamArn: typing.Union[MetaOapg.properties.logStreamArn, str, ],
        creationTime: typing.Union[MetaOapg.properties.creationTime, str, datetime, ],
        firstEventTimestamp: typing.Union[MetaOapg.properties.firstEventTimestamp, str, datetime, ],
        logStreamName: typing.Union[MetaOapg.properties.logStreamName, str, ],
        lastEventTimestamp: typing.Union[MetaOapg.properties.lastEventTimestamp, str, datetime, ],
        lastIngestionTime: typing.Union[MetaOapg.properties.lastIngestionTime, str, datetime, ],
        uploadSequenceToken: typing.Union[MetaOapg.properties.uploadSequenceToken, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LogStream':
        return super().__new__(
            cls,
            *_args,
            logStreamArn=logStreamArn,
            creationTime=creationTime,
            firstEventTimestamp=firstEventTimestamp,
            logStreamName=logStreamName,
            lastEventTimestamp=lastEventTimestamp,
            lastIngestionTime=lastIngestionTime,
            uploadSequenceToken=uploadSequenceToken,
            _configuration=_configuration,
            **kwargs,
        )
