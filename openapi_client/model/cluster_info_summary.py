# coding: utf-8

"""
    ParallelCluster

    ParallelCluster API  # noqa: E501

    The version of the OpenAPI document: 3.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ClusterInfoSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "clusterName",
            "cloudformationStackStatus",
            "cloudformationStackArn",
            "region",
            "version",
            "clusterStatus",
        }
        
        class properties:
            
            
            class clusterName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[a-zA-Z][a-zA-Z0-9-]+$',  # noqa: E501
                    }]
            region = schemas.StrSchema
            version = schemas.StrSchema
            cloudformationStackArn = schemas.StrSchema
        
            @staticmethod
            def cloudformationStackStatus() -> typing.Type['CloudFormationStackStatus']:
                return CloudFormationStackStatus
        
            @staticmethod
            def clusterStatus() -> typing.Type['ClusterStatus']:
                return ClusterStatus
        
            @staticmethod
            def scheduler() -> typing.Type['Scheduler']:
                return Scheduler
            __annotations__ = {
                "clusterName": clusterName,
                "region": region,
                "version": version,
                "cloudformationStackArn": cloudformationStackArn,
                "cloudformationStackStatus": cloudformationStackStatus,
                "clusterStatus": clusterStatus,
                "scheduler": scheduler,
            }
    
    clusterName: MetaOapg.properties.clusterName
    cloudformationStackStatus: 'CloudFormationStackStatus'
    cloudformationStackArn: MetaOapg.properties.cloudformationStackArn
    region: MetaOapg.properties.region
    version: MetaOapg.properties.version
    clusterStatus: 'ClusterStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterName"]) -> MetaOapg.properties.clusterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cloudformationStackArn"]) -> MetaOapg.properties.cloudformationStackArn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cloudformationStackStatus"]) -> 'CloudFormationStackStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterStatus"]) -> 'ClusterStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduler"]) -> 'Scheduler': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clusterName", "region", "version", "cloudformationStackArn", "cloudformationStackStatus", "clusterStatus", "scheduler", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterName"]) -> MetaOapg.properties.clusterName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cloudformationStackArn"]) -> MetaOapg.properties.cloudformationStackArn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cloudformationStackStatus"]) -> 'CloudFormationStackStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterStatus"]) -> 'ClusterStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduler"]) -> typing.Union['Scheduler', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clusterName", "region", "version", "cloudformationStackArn", "cloudformationStackStatus", "clusterStatus", "scheduler", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        clusterName: typing.Union[MetaOapg.properties.clusterName, str, ],
        cloudformationStackStatus: 'CloudFormationStackStatus',
        cloudformationStackArn: typing.Union[MetaOapg.properties.cloudformationStackArn, str, ],
        region: typing.Union[MetaOapg.properties.region, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        clusterStatus: 'ClusterStatus',
        scheduler: typing.Union['Scheduler', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClusterInfoSummary':
        return super().__new__(
            cls,
            *_args,
            clusterName=clusterName,
            cloudformationStackStatus=cloudformationStackStatus,
            cloudformationStackArn=cloudformationStackArn,
            region=region,
            version=version,
            clusterStatus=clusterStatus,
            scheduler=scheduler,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.cloud_formation_stack_status import CloudFormationStackStatus
from openapi_client.model.cluster_status import ClusterStatus
from openapi_client.model.scheduler import Scheduler
