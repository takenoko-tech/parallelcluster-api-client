# coding: utf-8

"""
    ParallelCluster

    ParallelCluster API  # noqa: E501

    The version of the OpenAPI document: 3.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AmiInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "amiId",
            "os",
            "name",
            "version",
            "architecture",
        }
        
        class properties:
            architecture = schemas.StrSchema
            amiId = schemas.StrSchema
            name = schemas.StrSchema
            os = schemas.StrSchema
            version = schemas.StrSchema
            __annotations__ = {
                "architecture": architecture,
                "amiId": amiId,
                "name": name,
                "os": os,
                "version": version,
            }
    
    amiId: MetaOapg.properties.amiId
    os: MetaOapg.properties.os
    name: MetaOapg.properties.name
    version: MetaOapg.properties.version
    architecture: MetaOapg.properties.architecture
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["architecture"]) -> MetaOapg.properties.architecture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amiId"]) -> MetaOapg.properties.amiId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["os"]) -> MetaOapg.properties.os: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["architecture", "amiId", "name", "os", "version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["architecture"]) -> MetaOapg.properties.architecture: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amiId"]) -> MetaOapg.properties.amiId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["os"]) -> MetaOapg.properties.os: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["architecture", "amiId", "name", "os", "version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amiId: typing.Union[MetaOapg.properties.amiId, str, ],
        os: typing.Union[MetaOapg.properties.os, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        architecture: typing.Union[MetaOapg.properties.architecture, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AmiInfo':
        return super().__new__(
            cls,
            *_args,
            amiId=amiId,
            os=os,
            name=name,
            version=version,
            architecture=architecture,
            _configuration=_configuration,
            **kwargs,
        )
